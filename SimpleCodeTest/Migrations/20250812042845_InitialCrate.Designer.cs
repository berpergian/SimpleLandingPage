// <auto-generated />
using System;
using CodeTest.Configurations;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SimpleCodeTest.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250812042845_InitialCrate")]
    partial class InitialCrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("postgresTest")
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodeTest.Models.Actor", b =>
                {
                    b.Property<int>("ActorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ActorId"));

                    b.Property<string>("ActorGender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ActorId");

                    b.ToTable("Actors", "postgresTest");
                });

            modelBuilder.Entity("CodeTest.Models.Director", b =>
                {
                    b.Property<int>("DirectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DirectorId"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DirectorId");

                    b.ToTable("Directors", "postgresTest");
                });

            modelBuilder.Entity("CodeTest.Models.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));

                    b.Property<string>("GenreTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GenreId");

                    b.ToTable("Genres", "postgresTest");
                });

            modelBuilder.Entity("CodeTest.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MovieId"));

                    b.Property<string>("MovieCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MovieDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MovieLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MovieTime")
                        .HasColumnType("integer");

                    b.Property<string>("MovieTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MovieYear")
                        .HasColumnType("integer");

                    b.HasKey("MovieId");

                    b.ToTable("Movies", "postgresTest");
                });

            modelBuilder.Entity("CodeTest.Models.MovieCast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCasts", "postgresTest");
                });

            modelBuilder.Entity("CodeTest.Models.MovieDirection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DirectorId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieDirections", "postgresTest");
                });

            modelBuilder.Entity("CodeTest.Models.MovieGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenres", "postgresTest");
                });

            modelBuilder.Entity("CodeTest.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfRating")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewStars")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("Ratings", "postgresTest");
                });

            modelBuilder.Entity("CodeTest.Models.Reviewer", b =>
                {
                    b.Property<int>("ReviewerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ReviewerId"));

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ReviewerId");

                    b.ToTable("Reviewers", "postgresTest");
                });

            modelBuilder.Entity("CodeTest.Models.MovieCast", b =>
                {
                    b.HasOne("CodeTest.Models.Actor", "Actor")
                        .WithMany("MovieCasts")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeTest.Models.Movie", "Movie")
                        .WithMany("MovieCasts")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CodeTest.Models.MovieDirection", b =>
                {
                    b.HasOne("CodeTest.Models.Director", "Director")
                        .WithMany("MovieDirections")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeTest.Models.Movie", "Movie")
                        .WithMany("MovieDirections")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CodeTest.Models.MovieGenre", b =>
                {
                    b.HasOne("CodeTest.Models.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeTest.Models.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("CodeTest.Models.Rating", b =>
                {
                    b.HasOne("CodeTest.Models.Movie", "Movie")
                        .WithMany("MovieReviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeTest.Models.Reviewer", "Reviewer")
                        .WithMany("MovieReviews")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("CodeTest.Models.Actor", b =>
                {
                    b.Navigation("MovieCasts");
                });

            modelBuilder.Entity("CodeTest.Models.Director", b =>
                {
                    b.Navigation("MovieDirections");
                });

            modelBuilder.Entity("CodeTest.Models.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("CodeTest.Models.Movie", b =>
                {
                    b.Navigation("MovieCasts");

                    b.Navigation("MovieDirections");

                    b.Navigation("MovieGenres");

                    b.Navigation("MovieReviews");
                });

            modelBuilder.Entity("CodeTest.Models.Reviewer", b =>
                {
                    b.Navigation("MovieReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
